backoff () {
    retry=1
    timeout=10

    while [ $retry -le $timeout ]; do
        eval $@
        if [ $? -eq 0 ]; then
            break
        fi

        sleeptime=`dc -e "2 $retry ^ p"`
        echo "Command failed, sleeping $sleeptime seconds before retrying."
        sleep $sleeptime
        let "retry += 1"
    done

    if [ $retry -ge $timeout ]; then
        echo "Timeout reached while trying to run command."
    fi
}

bl() {
    less /var/tmp/build-root/$1-$2/.build.log
}

bzit() {
    if [ ! -z $1 ]; then
        tar --exclude-vcs -cjf $1.tar.bz2 $1
    fi
}

browser () {
    f=`mktemp --suffix=.html`
    cat /dev/stdin > $f
    xdg-open $f
}

certinfo () {
    openssl x509 -in $1 -text -noout
}

disable_alsr() {
    echo 0 | sudo tee -a /proc/sys/kernel/randomize_va_space
}

dumpenv () {
    if [ ! -z $1 ]; then
        sudo cat /proc/$1/environ | xargs --null --max-args=1 | sort
    else
        echo "Pass a PID parameter."
    fi
}

encode_film() {
    avconv -i $1 -c:v libx264 -preset medium -tune film $2
}

entropy() {
    echo $(cat /proc/sys/kernel/random/entropy_avail)/$(cat /proc/sys/kernel/random/poolsize)
}

extract () {
    if [ -f $1 ] ; then
      case $1 in
        *.tar.lzma|*.tar.bz2|*.tar.gz|*.tar|*.tbz2|*.tgz)
                     tar xvf $1     ;;
        *.lzma)
                     lzma -d $1     ;;
        *.bz2)       bunzip2 $1     ;;
        *.rar)       unrar e $1     ;;
        *.gz)        gunzip $1      ;;
        *.zip)       unzip $1       ;;
        *.Z)         uncompress $1  ;;
        *.7z)        7z x $1        ;;
        *)     echo "'$1' cannot be extracted via extract()" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}

find_broken_symlinks() {
    find -L $1 -type l -exec ls -lF --color=yes '{}' +
}

ftrace () {
    strace -f -e trace=file $@
}

myip () {
    curl -s whatismyip.akamai.com && echo
}

kde_release() {
    cmake -DCMAKE_SKIP_RPATH=ON -DCMAKE_INSTALL_PREFIX=/usr \
          -DLIBEXEC_INSTALL_DIR:PATH=/usr/lib64/kde4/libexec \
          -DLIB_SUFFIX=64 -DCMAKE_BUILD_TYPE=release ..
}

kde_debug() {
    cmake -DCMAKE_SKIP_RPATH=ON -DCMAKE_INSTALL_PREFIX=/usr \
          -DLIBEXEC_INSTALL_DIR:PATH=/usr/lib64/kde4/libexec \
          -DLIB_SUFFIX=64 -DCMAKE_BUILD_TYPE=debug ..
}

keygen() {
    ssh-keygen -o -p -a 256
}

lupx () {
    upx --best --lzma $@
}

mcd () {
    mkdir -p "$1" && cd "$1";
}

mp3() {
    youtube-dl --extract-audio --title --audio-format mp3 "$1"
}

mvim () {
    if [ -z "$@" ]; then
        gvim --remote-tab-silent "New Document"
    else
        gvim --remote-tab-silent $@
    fi
}

start() {
    sudo systemctl start $1
    sudo systemctl status $1 -l
}

stop () {
    sudo systemctl stop $1
    sudo systemctl status $1 -l
}

upup () {
    if [ -e /etc/SUSE-brand ]; then
	    sudo zypper ref && sudo zypper dup
    elif [ -e /etc/debian_version ]; then
        sudo apt-get update && sudo apt-get dist-upgrade -y
    elif [ -e /etc/redhat-release ]; then
        sudo yum update
    fi
}

rands () {
    if [ -e /dev/hwrng ]; then
        DEVICE="/dev/hwrng"
    else
        DEVICE="/dev/random"
    fi

    if [ -z $1 ]; then
        base64 < $DEVICE | tr -dc 'a-zA-Z0-9' | head -c32
    else
        base64 < $DEVICE | tr -dc 'a-zA-Z0-9' | head -c$1
    fi
    print
}

sniff () {
    sudo ngrep -d ${1} -t '^(GET|POST) ' 'tcp and port 80';
}

sshproxy() {
    # Usage sproxy port username@host
    ssh -fND localhost:$1 $2
}

sslcheck() {
    if [ -z $2 ]; then
        nmap --script ssl-enum-ciphers -p 443 $1
    else
        nmap --script ssl-enum-ciphers -p $2 $1
    fi
}

tl() {
    tail -f /var/tmp/build-root/$1-$2/.build.log
}

unrpm() {
    if [ -e $1 ]; then
        rpm2cpio $1 | cpio -imdv
    fi
}

vstream() {
    vlc "$1" --sout '#transcode{vcodec=h264,acodec=mp3,ab=128,channels=2,samplerate=44100}:http{dst=:8080/go.mpg}'
}

ydl() {
    youtube-dl --prefer-free-formats "$1" -o %(title)s.%(ext)s
}
