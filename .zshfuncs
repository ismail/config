backoff () {
    retry=1
    timeout=10

    while [ $retry -le $timeout ]; do
        eval $@
        if [ $? -eq 0 ]; then
            break
        fi

        sleeptime=$(( 2**$retry ))
        echo "Command failed, sleeping $sleeptime seconds before retrying."
        sleep $sleeptime
        let "retry += 1"
    done

    if [ $retry -ge $timeout ]; then
        echo "Timeout reached while trying to run command."
    fi
}

browser () {
    f=`mktemp --suffix=.html`
    cat /dev/stdin > $f
    xdg-open $f &> /dev/null
}

certinfo () {
    openssl x509 -in $1 -text -noout
}

currency () {
    if [ ! -z $1 ]; then
        currency=`echo $1 | tr '[:lower:]' '[:upper:]'`
        curl -s "https://www.google.com/finance/chart?safe=off&es_sm=93&q=CURRENCY:$currency&tkr=1&p=1D&chst=vkc&chs=640x480&chsc=1" -o - | gm display - &> /dev/null
    fi
}

disable_alsr () {
    echo 0 | sudo tee -a /proc/sys/kernel/randomize_va_space
}

distro () {
    if [ -e /etc/SUSE-brand ]; then
        echo "SUSE"
    elif [ -e /etc/debian_version ]; then
        echo "DEBIAN"
    elif [ -e /etc/redhat-release ]; then
        echo "REDHAT"
    fi
}

download () {
    if [ ! -z $1 ]; then
        for url in $@; do
            curl -O -J -L -C- -# "$url"
        done
    else
        echo "Pass an URL parameter."
    fi
}

dumpenv () {
    if [ ! -z $1 ]; then
        sudo cat /proc/$1/environ | xargs --null --max-args=1 | sort
    else
        echo "Pass a PID parameter."
    fi
}

encode_film() {
    avconv -i $1 -c:v libx264 -preset medium -tune film ${1:t:r}.mp4
}

entropy() {
    echo $(cat /proc/sys/kernel/random/entropy_avail)/$(cat /proc/sys/kernel/random/poolsize)
}

find_broken_symlinks() {
    find -L $1 -type l -exec ls -lF --color=yes '{}' +
}

fork() {
    (setsid "$@" &)
}

ftrace () {
    strace -f -e trace=file $@
}

gensshmoduli () {
    if [ -z $1 ]; then
        echo "Pass requested number of bits as the first parameter."
        return
    fi

    f=`mktemp /tmp/moduli.$1.candidate.XXXXXX`
    ssh-keygen -G $f -b $1
    ssh-keygen -T moduli.$1.tested -f $f
    rm $f
    echo "$1 bit SSH moduli is ready under moduli.$1.tested file."
}

install () {
    dist=$(distro)
    case $dist in
        SUSE)
            sudo zypper in "$@"
            ;;
        DEBIAN)
            sudo apt-get install "$@"
            ;;
        REDHAT)
            sudo yum install "$@"
            ;;
    esac
}

keygen () {
    ssh-keygen -o -a 65536 -t ed25519
}

lastmod () {
    if [ -z $1 ]; then
        return 0
    fi

    d=`curl -s -I $1 | grep "Last-Modified" | sed s,"Last-Modified: ",,g`
    local -a result

    if [ -z $d ]; then
        echo "No Last-Modified header available."
        return
    fi

    d1=$(date +%s)
    d2=$(date -d "$d" +%s)
    diff=$((d1 - d2))

    if [ $diff -gt 86400 ]; then
        days="$(($diff/86400))"
        diff=$(($diff - days*86400))
        result+=( "$days days" )
    fi

    if [ $diff -gt 3600 ]; then
        hours=$(($diff/3600))
        diff=$(($diff - hours*3600))
        result+=( "$hours hours" )
    fi

    if [ $diff -gt 60 ]; then
        minutes=$(($diff/60))
        diff=$(($diff - minutes*60))
        result+=( "$minutes minutes" )
    fi

    if [ $diff -gt 0 ]; then
        seconds=$diff
        result+=( "$seconds seconds" )
    fi

    echo "${(j:, :)result} ago."
}

longurl () {
    curl -w "%{url_effective}\n" -L -s -S $1 -o /dev/null
}

lupx () {
    upx --best --lzma $@
}

mcd () {
    mkdir -p "$1" && cd "$1";
}

mp3() {
    youtube-dl --extract-audio --title --audio-format mp3 "$1"
}

mvim () {
    if [ -z "$@" ]; then
        gvim --remote-tab-silent "New Document"
    else
        gvim --remote-tab-silent $@
    fi
}

myip () {
    curl -s whatismyip.akamai.com && echo
}

restart () {
    sudo systemctl restart $1
    sleep 1
    sudo systemctl status $1 -l
}

remove () {
    dist=$(distro)
    case $dist in
        SUSE)
            sudo zypper rm "$@"
            ;;
        DEBIAN)
            sudo apt-get --purge remove "$@"
            ;;
        REDHAT)
            sudo yum remove "$@"
            ;;
    esac
}

search () {
    dist=$(distro)
    case $dist in
        SUSE)
            sudo zypper search "$@"
            ;;
        DEBIAN)
            sudo apt-cache search "$@"
            ;;
        REDHAT)
            sudo yum search "$@"
            ;;
    esac
}

srand () {
    if [ -e /dev/hwrng ]; then
        DEVICE="/dev/hwrng"
    else
        DEVICE="/dev/random"
    fi

    if [ -z $1 ]; then
        base64 < $DEVICE | head -c32
    else
        base64 < $DEVICE | head -c$1
    fi
    print
}

ssh() {
    # Taken from https://www.spatof.org/blog/tmux-ssh-rename-window.html
    # Do nothing if we are not inside tmux or ssh is called without arguments
    if [[ $# == 0 || -z $TMUX ]]; then
        command ssh $@
        return
    fi
    # The hostname is the last parameter (i.e. ${(P)#})
    local remote=${${(P)#}%.*}
    local old_name="$(tmux display-message -p '#W')"
    local renamed=0
    # Save the current name
    if [[ $remote != -* ]]; then
        renamed=1
        tmux rename-window $remote
    fi
    command ssh $@
    if [[ $renamed == 1 ]]; then
        tmux rename-window "$old_name"
    fi
}

sslcheck() {
    if [ -z $2 ]; then
        nmap --system-dns --script ssl-enum-ciphers -p 443 $1
    else
        nmap --system-dns --script ssl-enum-ciphers -p $2 $1
    fi
}

start() {
    sudo systemctl start $1
    sleep 1
    sudo systemctl status $1 -l
}

status () {
    sudo systemctl status $1 -l
}

stop () {
    sudo systemctl stop $1
    sleep 1
    sudo systemctl status $1 -l
}

synconf () {
    pull ~/config ~/hacks
}

tm () {
    tmux new-session -d "$*; sleep infinity"
}

unrpm () {
    if [ -e $1 ]; then
        rpm2cpio $1 | cpio -imdv
    fi
}

upup () {
    dist=$(distro)
    case $dist in
        SUSE)
            sudo zypper ref && sudo zypper -n dup --auto-agree-with-licenses
            ;;
        DEBIAN)
            sudo apt-get update && sudo apt-get dist-upgrade -y
            ;;
        REDHAT)
            sudo yum update -y
            ;;
    esac
}

vstream() {
    vlc "$1" --sout '#transcode{vcodec=h264,acodec=mp3,ab=128,channels=2,samplerate=44100}:http{dst=:8080/live.mpg}'
}

x () {
    if [ -f $1 ] ; then
      case $1 in
        *.tar.lzma|*.tar.xz|*.tar.bz2|*.tar.gz|*.tar|*.tbz2|*.tgz|*.tbz)
                     tar xvf $1     ;;
        *.lzma)
                     lzma -d $1     ;;
        *.bz2)       bunzip2 $1     ;;
        *.rar)       unrar e $1     ;;
        *.gz)        gunzip $1      ;;
        *.zip)       unzip $1       ;;
        *.Z)         uncompress $1  ;;
        *.7z)        7z x $1        ;;
        *.rpm)       unrpm $1       ;;
        *.deb)       ar x $1 && tar xvf data.tar.xz ;;
        *)     echo "'$1' cannot be extracted via extract()" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}

xzit() {
    if [ ! -z $1 ]; then
        tar --exclude-vcs -cJf $1.tar.xz $1
    fi
}


ydl() {
    youtube-dl "$1" -o %(title)s.%(ext)s
}
